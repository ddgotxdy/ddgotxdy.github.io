<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[leetcode]最大化网格图中正方形空洞的面积</title>
    <url>/2024/02/25/leetcode-%E6%9C%80%E5%A4%A7%E5%8C%96%E7%BD%91%E6%A0%BC%E5%9B%BE%E4%B8%AD%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%A9%BA%E6%B4%9E%E7%9A%84%E9%9D%A2%E7%A7%AF/</url>
    <content><![CDATA[<blockquote>
<p><em>原题链接 <a href="https://leetcode.cn/problems/maximize-area-of-square-hole-in-grid/description/">2943. 最大化网格图中正方形空洞的面积 - 力扣（LeetCode）</a></em>  </p>
</blockquote>
<p>给你一个网格图，由 <code>n + 2</code> 条 <strong>横线段</strong> 和 <code>m + 2</code> 条 <strong>竖线段</strong> 组成，一开始所有区域均为 <code>1 x 1</code> 的单元格。</p>
<p>所有线段的编号从 <strong>1</strong> 开始。</p>
<p>给你两个整数 <code>n</code> 和 <code>m</code> 。</p>
<p>同时给你两个整数数组 <code>hBars</code> 和 <code>vBars</code> 。</p>
<ul>
<li><code>hBars</code> 包含区间 <code>[2, n + 1]</code> 内 <strong>互不相同</strong> 的横线段编号。</li>
<li><code>vBars</code> 包含 <code>[2, m + 1]</code> 内 <strong>互不相同的</strong> 竖线段编号。</li>
</ul>
<p>如果满足以下条件之一，你可以 <strong>移除</strong> 两个数组中的部分线段：</p>
<ul>
<li>如果移除的是横线段，它必须是 <code>hBars</code> 中的值。</li>
<li>如果移除的是竖线段，它必须是 <code>vBars</code> 中的值。</li>
</ul>
<p>请你返回移除一些线段后（<strong>可能不移除任何线段）</strong>，剩余网格图中 <strong>最大正方形</strong> 空洞的面积，正方形空洞的意思是正方形 <strong>内部</strong> 不含有任何线段。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://blog.ddgotxdy.com/2024/02/25/leetcode-%E6%9C%80%E5%A4%A7%E5%8C%96%E7%BD%91%E6%A0%BC%E5%9B%BE%E4%B8%AD%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%A9%BA%E6%B4%9E%E7%9A%84%E9%9D%A2%E7%A7%AF/screenshot-from-2023-11-05-22-40-25-1708876719370-3.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2, m = 1, hBars = [2,3], vBars = [2]</span><br><span class="line">输出：4</span><br><span class="line">解释：左边的图是一开始的网格图。</span><br><span class="line">横线编号的范围是区间 [1,4] ，竖线编号的范围是区间 [1,3] 。</span><br><span class="line">可以移除的横线段为 [2,3] ，竖线段为 [2] 。</span><br><span class="line">一种得到最大正方形面积的方法是移除横线段 2 和竖线段 2 。</span><br><span class="line">操作后得到的网格图如右图所示。</span><br><span class="line">正方形空洞面积为 4。</span><br><span class="line">无法得到面积大于 4 的正方形空洞。</span><br><span class="line">所以答案为 4 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://blog.ddgotxdy.com/2024/02/25/leetcode-%E6%9C%80%E5%A4%A7%E5%8C%96%E7%BD%91%E6%A0%BC%E5%9B%BE%E4%B8%AD%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%A9%BA%E6%B4%9E%E7%9A%84%E9%9D%A2%E7%A7%AF/screenshot-from-2023-11-04-17-01-02.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1, m = 1, hBars = [2], vBars = [2]</span><br><span class="line">输出：4</span><br><span class="line">解释：左边的图是一开始的网格图。</span><br><span class="line">横线编号的范围是区间 [1,3] ，竖线编号的范围是区间 [1,3] 。</span><br><span class="line">可以移除的横线段为 [2] ，竖线段为 [2] 。</span><br><span class="line">一种得到最大正方形面积的方法是移除横线段 2 和竖线段 2 。</span><br><span class="line">操作后得到的网格图如右图所示。</span><br><span class="line">正方形空洞面积为 4。</span><br><span class="line">无法得到面积大于 4 的正方形空洞。</span><br><span class="line">所以答案为 4 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<p><img src="https://blog.ddgotxdy.com/2024/02/25/leetcode-%E6%9C%80%E5%A4%A7%E5%8C%96%E7%BD%91%E6%A0%BC%E5%9B%BE%E4%B8%AD%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%A9%BA%E6%B4%9E%E7%9A%84%E9%9D%A2%E7%A7%AF/screenshot-from-2023-11-05-22-33-35.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2, m = 3, hBars = [2,3], vBars = [2,3,4]</span><br><span class="line">输出：9</span><br><span class="line">解释：左边的图是一开始的网格图。</span><br><span class="line">横线编号的范围是区间 [1,4] ，竖线编号的范围是区间 [1,5] 。</span><br><span class="line">可以移除的横线段为 [2,3] ，竖线段为 [2,3,4] 。</span><br><span class="line">一种得到最大正方形面积的方法是移除横线段 2、3 和竖线段 3、4 。</span><br><span class="line">操作后得到的网格图如右图所示。</span><br><span class="line">正方形空洞面积为 9。</span><br><span class="line">无法得到面积大于 9 的正方形空洞。</span><br><span class="line">所以答案为 9 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 109</code></li>
<li><code>1 &lt;= m &lt;= 109</code></li>
<li><code>1 &lt;= hBars.length &lt;= 100</code></li>
<li><code>2 &lt;= hBars[i] &lt;= n + 1</code></li>
<li><code>1 &lt;= vBars.length &lt;= 100</code></li>
<li><code>2 &lt;= vBars[i] &lt;= m + 1</code></li>
<li><code>hBars</code> 中的值互不相同。</li>
<li><code>vBars</code> 中的值互不相同。</li>
</ul>
<span id="more"></span>



<p>解题思路：</p>
<p>单独分析每一条边，只需要考虑</p>
<ul>
<li>长：最长能组成的连续长度 a，即求最长上升<strong>子串</strong>长度</li>
<li>宽：最长能组成的连续长度 b，即求最长上升<strong>子串</strong>长度</li>
</ul>
<p>答案即为 $min(a, b) ^ 2$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximizeSquareHoleArea</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span>[] hBars, <span class="type">int</span>[] vBars)</span> &#123;</span><br><span class="line">        Arrays.sort(hBars);</span><br><span class="line">        Arrays.sort(vBars);</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxH</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxV</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 求宽</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; hBars.length; i ++) &#123;</span><br><span class="line">            maxH = Math.max(maxH, count);</span><br><span class="line">            <span class="keyword">if</span> (hBars[i] == hBars[i-<span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                count ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maxH = Math.max(maxH, count);</span><br><span class="line">        <span class="comment">// 求长</span></span><br><span class="line">        count = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; vBars.length; i ++) &#123;</span><br><span class="line">            maxV = Math.max(maxV, count);</span><br><span class="line">            <span class="keyword">if</span> (vBars[i] == vBars[i-<span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                count ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maxV = Math.max(maxV, count);</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(maxH, maxV);</span><br><span class="line">        <span class="keyword">return</span> min * min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>合约类广告库存算法</title>
    <url>/2024/02/24/%E5%90%88%E7%BA%A6%E7%B1%BB%E5%B9%BF%E5%91%8A%E5%BA%93%E5%AD%98%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="先来一张图片测试"><a href="#先来一张图片测试" class="headerlink" title="先来一张图片测试"></a>先来一张图片测试</h2><p><img src="https://blog.ddgotxdy.com/2024/02/24/%E5%90%88%E7%BA%A6%E7%B1%BB%E5%B9%BF%E5%91%8A%E5%BA%93%E5%AD%98%E7%AE%97%E6%B3%95/3.jpg" alt="3"></p>
]]></content>
      <categories>
        <category>计算广告</category>
      </categories>
      <tags>
        <tag>库存分配算法</tag>
      </tags>
  </entry>
</search>
